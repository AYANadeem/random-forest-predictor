# -*- coding: utf-8 -*-
"""Census_Income(RandomForestClassifier).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kQdnMCtBq5CVfeB8VWDlKX2VBwnJlzY3
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from imblearn.over_sampling import SMOTE
import seaborn as sns
import matplotlib.pyplot as plt

income_df = pd.read_csv('/content/Project Description.csv')
income_df.head()

label_encoder = LabelEncoder()
categorical_columns = ['workclass', 'education', 'marital-status', 'occupation',
                       'relationship', 'race', 'sex', 'native-country']
for column in categorical_columns:
    income_df[column] = label_encoder.fit_transform(income_df[column])

income_df = income_df.fillna(method='ffill')

income_df = pd.get_dummies(income_df, drop_first=True)

if 'fnlwgt' in income_df.columns:
    income_df = income_df.drop('fnlwgt', axis=1)

X = income_df.drop('income', axis=1)
y = income_df['income']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(income_df['income'].unique())

smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'class_weight': ['balanced', None]
}

grid = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=3, scoring='f1', n_jobs=-1)
grid.fit(X_train_res, y_train_res)
print("Best params:", grid.best_params_)

final_model = RandomForestClassifier(
    class_weight='balanced',
    max_depth=None,
    min_samples_leaf=1,
    min_samples_split=2,
    n_estimators=200,
    random_state=42
)

final_model.fit(X_train_res, y_train_res)

y_pred = final_model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

print(income_df['income'].value_counts(normalize=True))

income_df['income'] = income_df['income'].astype(str).str.strip().str.replace('.', '', regex=False)

income_df['income'] = income_df['income'].map({'<=50K': 0, '>50K': 1})

print(income_df['income'].value_counts(normalize=True))
print(income_df['income'].isnull().sum())